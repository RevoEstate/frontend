import { customerSignupSchema } from "@/app/(auth)/signup-customer/customer-signup-form";
import { createPropertyDefaultValues } from "@/lib/constants/index.ts";
import { realestateSchema } from "@/lib/validators";
import { z } from "zod";

export type CustomerSignupFormData = z.infer<typeof customerSignupSchema>;

export type Realestate = z.infer<typeof realestateSchema>

// types/package.interface.ts
// export interface IPackagePrice {
//     usd: number;
//     etb: number;
//   }
  
//   export interface IPackage {
//     _id?: string; // Optional for when creating new packages before they're saved to DB
//     userId: string;
//     packageName: string;
//     packagePrice: IPackagePrice;
//     packageDuration: number;
//     packageType: string;
//     packageDescription: string;
//     imageUrl: string;
//     numberOfProperties: number;
//     createdAt?: Date; // Optional as it's auto-generated by Mongoose
//     updatedAt?: Date; // Optional as it's auto-generated by Mongoose
//   }

  export type PropertyFormValues = typeof createPropertyDefaultValues;

  export interface Property {
    _id: string;
    propertyId: string;
    title: string;
    description: string;
    price: number;
    address: {
      geoPoint?: {
        coordinates?: [number, number];
        type: "Point";
      };
      region: string;
      city: string;
      specificLocation: string;
    };
    bedrooms: number;
    bathrooms: number;
    area: number;
    landArea: number;
    propertyType: "Apartment" | "House" | "Commercial" | "Land" | "Villa";
    listingType: string;
    furnished: "Yes" | "No";
    builtInYear: number;
    amenities: string[];
    images: string[];
    panoramicImages: string[];
    isActive: boolean;
    isFeatured: boolean;
    status: "available" | "sold" | "rented";
    viewCount?: number;
    createdAt?: string;
    updatedAt?: string;
    expireDate?: string;
    purchaseId?: string;
    userId?: {
      _id: string;
      id: string;
      firstName: string;
      lastName: string;
      email: string;
      emailVerified: boolean;
      role: string;
      isVerified: boolean;
      createdAt: string;
      updatedAt: string;
    };
    companyId?: {
      _id: string;
      realEstateName: string;
      description: string;
      email: string;
      phone: string;
      isVerified?: boolean;
      verificationStatus: string;
      verifiedAt?: string;
      verifiedBy?: string;
      imageUrl?: string;
      documentUrl?: string;
      createdAt?: string;
      updatedAt?: string;
      address: {
        geoPoint?: {
          coordinates?: [number, number];
          type: "Point";
        };
        region: string;
        city: string;
        specificLocation: string;
      };
      socialMedia?: {
        facebook?: string;
        instagram?: string;
        linkedin?: string;
        tiktok?: string;
        whatsapp?: string;
      };
    };
  }
