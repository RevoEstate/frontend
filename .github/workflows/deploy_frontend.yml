name: Deploy RevoState Frontend
description: Deploy the RevoState frontend to a VPS using SSH and rsync with optimized dependency handling

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed
  repository_dispatch:
    types: [deploy_frontend]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '18'
      PROJECT_PATH: '/home/ubuntu/projects/revostate/frontend'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy Code to VPS (Excluding node_modules)
        run: |
          rsync -avz --delete --exclude='node_modules' --exclude='.next' --exclude='.git' \
            -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.VPS_PORT }}" \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:"${{ env.PROJECT_PATH }}/"

      - name: Install Dependencies, Build & Restart on VPS
        uses: appleboy/ssh-action@v0.1.7  # Reverting to stable version
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd "${{ env.PROJECT_PATH }}"
            
            # Ensure proper PATH for PM2 and Node
            export PATH=$PATH:/usr/local/bin:/usr/bin:/bin:$HOME/.npm-global/bin:$HOME/.nvm/versions/node/v${{ env.NODE_VERSION }}/bin
            
            # Setup node environment if using NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm use ${{ env.NODE_VERSION }} || nvm install ${{ env.NODE_VERSION }}
            
            echo "Current directory: $(pwd)"
            echo "Node version: $(node -v)"
            echo "NPM version: $(npm -v)"
            
            # Install dependencies
            rm -rf node_modules
            npm ci
            
            # Verify build directory was created
            echo "Building application..."
            npm run build
            
            # Verify the .next directory exists before continuing  
            if [ ! -d ".next" ]; then
              echo "Build failed: .next directory not found"
              exit 1
            fi
            
            # Check if PM2 is installed globally, if not install it
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi
            
            # Stop and restart the application
            echo "Restarting application with PM2..."
            pm2 describe revostate-frontend > /dev/null
            if [ $? -eq 0 ]; then
              # App exists, reload it
              pm2 reload revostate-frontend
            else
              # App doesn't exist, start it
              pm2 start npm --name "revostate-frontend" -- start
            fi
            
            pm2 save
            
            # Verify the app is running
            pm2 list | grep revostate-frontend

      - name: Verify Deployment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Ensure proper PATH for PM2
            export PATH=$PATH:/usr/local/bin:/usr/bin:/bin:$HOME/.npm-global/bin
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            
            # Check if service is running
            pm2 list | grep revostate-frontend
            
            # Wait for the application to fully start (10 seconds)
            echo "Waiting for application to start..."
            sleep 10
            
            # Health check
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
            echo "HTTP Status: $HTTP_STATUS"
            
            if [[ "$HTTP_STATUS" == "200" ]]; then
              echo "Deployment successful! Application is responding."
              exit 0
            else
              echo "Health check failed! Application is not responding properly."
              exit 1
            fi

      - name: Reload Nginx
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            sudo nginx -t && sudo systemctl reload nginx
